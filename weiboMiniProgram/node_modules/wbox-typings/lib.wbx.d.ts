  type ShowToastIconType = 'success' | 'warn' | 'loading' | 'none';
  type SetBackgroundTextStyleTextStyleType = 'dark' | 'light';
  type RequestMethodType = 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT';
  type RequestDataTypeType = 'json' | 'other';
  type RequestResponseTypeType = 'text';
  type AppendFileEncodingType = 'ascii' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type AppendFileSyncEncodingType = 'ascii' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type ReadFileEncodingType = 'ascii' | 'base64' | 'binary' | 'hex' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type ReadFileSyncEncodingType = 'ascii' | 'base64' | 'binary' | 'hex' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type WriteFileEncodingType = 'ascii' | 'base64' | 'binary' | 'hex' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type WriteFileSyncEncodingType = 'ascii' | 'base64' | 'binary' | 'hex' | 'ucs2/ucs-2/utf16le/utf-16le' | 'utf-8/utf8' | 'latin1';
  type WbreqeustUrlType = '*.weibo.cn' | '*.weibo.com' | '*.sina.com' | '*.sina.cn';
  type WbreqeustMethodType = 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT';
  type WbreqeustDataTypeType = 'json' | '其他';
  type WbreqeustResponseTypeType = 'text';
  type MapireqeustMethodType = 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT';
  type MapireqeustDataTypeType = 'json' | '其他';
  type MapireqeustResponseTypeType = 'text';


   interface ShowMultiChoiceDialogItemListObject {
     /**
      * item唯一的id
      */
     key: string;
     /**
      * 是否选中, 默认值: false
      */
     checked?: boolean;
     /**
      * item内容
      */
     content: string;
     /**
      * item描述
      */
     desc: string;
   }

   interface ShowMultiChoiceDialogItemListObject {
     /**
      * item唯一的id
      */
     key: string;
     /**
      * 是否选中, 默认值: false
      */
     checked?: boolean;
     /**
      * item内容
      */
     content: string;
     /**
      * item描述
      */
     desc: string;
   }


   interface ShowTextDescDialogSuccessStateListObject {
     /**
      * item唯一的id
      */
     key: string;
     /**
      * item是否选中
      */
     checked: boolean;
   }

   interface ShowMultiChoiceDialogSuccessStateListObject {
     /**
      * item唯一的id
      */
     key: string;
     /**
      * item是否选中
      */
     checked: boolean;
   }

   interface GetSavedFileListSuccessFileListObject {
     filePath: 本地路径;
     /**
      * 本地文件大小，以字节为单位
      */
     size: number;
     /**
      * 文件保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数
      */
     createTime: number;
   }

   interface SelectWeiboContactSuccessUserinfoObject {
     /**
      * 用户uid
      */
     id: string;
     /**
      * 用户昵称
      */
     screen_name: string;
     /**
      * 头像链接
      */
     profile_image_url: string;
   }

   interface ShowMultiChoiceDialogSuccessStateListObject {
     /**
      * item唯一的id
      */
     key: string;
     /**
      * item是否选中
      */
     checked: boolean;
   }

  type TimerHandler = string | Function; 


  declare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
  declare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
  declare function clearInterval(handle ?: number): void;
  declare function clearTimeout(handle ?: number): void;

  declare var console: Console;

  declare var Console: {
    prototype: Console;
    new(): Console;
  };

interface Console {
  error(message?: any, ...optionalParams: any[]): void;
  info(message?: any, ...optionalParams: any[]): void;
  log(message?: any, ...optionalParams: any[]): void;
  warn(message?: any, ...optionalParams: any[]): void;
}





   interface BaseOptions {
     /**
      * BaseSuccessCallback
      */
     success?: BaseSuccessCallback;
     /**
      * BaseFailureCallback
      */
     failure?: BaseFailureCallback;
     /**
      * BaseCompleteCallback
      */
     complete?: BaseCompleteCallback;
   }

   interface NavigateToOptions extends BaseOptions {
     /**
      * 需要跳转的应用内非 tabBar 的页面的路径, 参数写在parameter
      */
     url: string;
   }

   interface NavigateBackOptions extends BaseOptions {
     /**
      * 返回的页面数，如果 delta 大于现有页面数，则返回到首页。
      */
     delta: string;
   }

   interface ShowToastOptions extends BaseOptions {
     /**
      * 提示的内容
      */
     title: string;
     /**
      * 图标, 默认值: 'success'
      */
     icon?: ShowToastIconType;
     /**
      * 自定义图标的本地路径，image 的优先级高于 icon
      */
     image?: string;
     /**
      * 提示的延迟时间, 默认值: 1500
      */
     duration?: number;
     /**
      * 是否显示透明蒙层，防止触摸穿透, 默认值: false
      */
     mask?: boolean;
   }

   interface ShowLoadingOptions extends BaseOptions {
     /**
      * 提示的内容
      */
     title: string;
     /**
      * 是否显示透明蒙层，防止触摸穿透, 默认值: false
      */
     mask?: boolean;
   }

   interface HideLoadingOptions extends BaseOptions {

   }

   interface ShowActionSheetOptions extends BaseOptions {
     /**
      * 按钮的文字数组，数组长度最大为 6
      */
     itemList: Array<String>;
     /**
      * 描述，最多显示两行
      */
     title?: string;
     /**
      * 按钮的文字颜色, 默认值: '#000000'
      */
     itemColor?: string;
   }

   interface SetBackgroundColorOptions extends BaseOptions {
     /**
      * 窗口的背景色，必须为十六进制颜色值
      */
     backgroundColor?: string;
     /**
      * 顶部窗口的背景色，必须为十六进制颜色值，仅 iOS 支持
      */
     backgroundColorTop?: string;
     /**
      * 底部窗口的背景色，必须为十六进制颜色值，仅 iOS 支持
      */
     backgroundColorBottom?: string;
   }

   interface SetBackgroundTextStyleOptions extends BaseOptions {
     /**
      * 下拉背景字体、loading 图的样式。
      */
     textStyle: SetBackgroundTextStyleTextStyleType;
   }

   interface SetTabBarBadgeOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
     text?: string;
   }

   interface RemoveTabBarBadgeOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
   }

   interface SetTabBarOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
     text?: string;
     iconPath?: string;
     selectdIconPath?: string;
   }

   interface ShowTabBarRedDotOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
   }

   interface HideTabBarRedDotOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
   }

   interface SetTabBarStyleOptions {
     /**
      * tabBar的哪一项，从左边算起
      */
     index: number;
     /**
      * tabbar文字颜色，支持十六进制和字符串色值
      */
     color?: string;
     /**
      * tabbar文字选中状态颜色，支持十六进制和字符串色值
      */
     selectedColor?: string;
     /**
      * tabbar背景色，支持十六进制和字符串色值
      */
     backgroundColor?: string;
   }

   interface ShowTextDescDialogOptions extends BaseOptions {
     /**
      * 对话框标题
      */
     title: string;
     /**
      * 描述(不传则不显示)
      */
     desc?: string;
     /**
      * 提示(不传则不显示)
      */
     hint?: string;
     /**
      * 描述字体颜色, 默认值: '#939393'
      */
     descColor?: string;
     /**
      * 描述是否单行显示, 默认值: true
      */
     descSingleLine?: boolean;
     /**
      * 提示字体颜色, 默认值: '#939393'
      */
     hintColor?: string;
     /**
      * 是否显示取消按钮, 默认值: true
      */
     showCancel?: boolean;
     /**
      * 取消按钮的文字, 默认值: '取消'
      */
     cancelText?: string;
     /**
      * 取消按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#000000'
      */
     cancelColor?: string;
     /**
      * 确认按钮的文字, 默认值: '确定'
      */
     confirmText?: string;
     /**
      * 确认按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#FF8200'
      */
     confirmColor?: string;
     /**
      * ShowTextDescDialogSuccessCallback
      */
     success?: ShowTextDescDialogSuccessCallback;
   }

   interface ShowMultiChoiceDialogOptions extends BaseOptions {
     /**
      * 对话框标题
      */
     title: string;
     /**
      * 描述
      */
     desc?: string;
     /**
      * 描述字体颜色, 默认值: '#939393'
      */
     descColor?: string;
     /**
      * 描述是否单行显示, 默认值: true
      */
     descSingleLine?: boolean;
     /**
      * 选择项数组
      */
     itemList: Array<ShowMultiChoiceDialogItemListObject>;
     /**
      * 是否显示取消按钮, 默认值: true
      */
     showCancel?: boolean;
     /**
      * 取消按钮的文字, 默认值: '取消'
      */
     cancelText?: string;
     /**
      * 取消按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#000000'
      */
     cancelColor?: string;
     /**
      * 确认按钮的文字, 默认值: '确定'
      */
     confirmText?: string;
     /**
      * 确认按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#FF8200'
      */
     confirmColor?: string;
     /**
      * 是否禁用面板内勾选功能, 默认值: false
      */
     touchDisable?: boolean;
     /**
      * ShowMultiChoiceDialogSuccessCallback
      */
     success?: ShowMultiChoiceDialogSuccessCallback;
   }

   interface ShowInputDialogOptions extends BaseOptions {
     /**
      * 对话框标题
      */
     title?: string;
     /**
      * 占位符
      */
     hint?: string;
     /**
      * 占位符字体颜色, 默认值: '#939393'
      */
     hintColor?: string;
     /**
      * 输入框字体颜色, 默认值: '#000000'
      */
     textColor?: string;
     /**
      * 输入正则
      */
     regex?: string;
     /**
      * 不符合输入正则的提示
      */
     alert?: string;
     /**
      * 确定按钮标题, 默认值: '确定'
      */
     confirmText?: string;
     /**
      * 取消按钮标题, 默认值: '取消'
      */
     cancelText?: string;
     /**
      * 确定按钮颜色, 默认值: '#fe9600'
      */
     confirmColor?: string;
     /**
      * 取消按钮颜色, 默认值: '#636363'
      */
     cancelColor?: string;
     /**
      * 描述信息
      */
     desc?: string;
   }

   interface RequestOptions extends BaseOptions {
     /**
      * 开发者服务器接口地址
      */
     url?: string;
     /**
      * 请求的参数
      */
     data?: string | Object;
     /**
      * 设置请求的 header，header 中不能设置 Referer。content-type 默认为 application/json
      */
     header?: Object;
     /**
      * 返回的数据格式, 默认值: 'json'
      */
     method?: RequestMethodType;
     /**
      * 响应的数据类型, 默认值: 'text'
      */
     responseType?: RequestResponseTypeType;
     /**
      * RequestSuccessCallback
      */
     success?: RequestSuccessCallback;
   }

   interface GetLocationOptions extends BaseOptions {
     /**
      * GetLocationSuccessCallback
      */
     success?: GetLocationSuccessCallback;
   }

   interface AccessOptions extends BaseOptions {
     /**
      * 要判断是否存在的文件/目录路径
      */
     path: string;
     /**
      * AccessSuccessCallback
      */
     success?: AccessSuccessCallback;
     /**
      * AccessFailureCallback
      */
     failure?: AccessFailureCallback;
     /**
      * AccessCompleteCallback
      */
     complete?: AccessCompleteCallback;
   }

   interface AccessSyncOptions extends BaseOptions {
     /**
      * 要判断是否存在的文件/目录路径
      */
     path: string;
   }

   interface AppendFileOptions extends BaseOptions {
     /**
      * 要追加内容的文件路径
      */
     filePath: string;
     /**
      * 要追加的文本
      */
     data: string;
     /**
      * 指定写入文件的字符编码，默认为utf-8, 默认值: 'utf8'
      */
     encoding?: AppendFileEncodingType;
     /**
      * AppendFileSuccessCallback
      */
     success?: AppendFileSuccessCallback;
     /**
      * AppendFileFailureCallback
      */
     failure?: AppendFileFailureCallback;
     /**
      * AppendFileCompleteCallback
      */
     complete?: AppendFileCompleteCallback;
   }

   interface AppendFileSyncOptions extends BaseOptions {
     /**
      * 要追加内容的文件路径
      */
     filePath: string;
     /**
      * 要追加的文本
      */
     data: string;
     /**
      * 指定写入文件的字符编码，默认为utf-8, 默认值: 'utf8'
      */
     encoding?: AppendFileSyncEncodingType;
   }

   interface SaveFileOptions extends BaseOptions {
     /**
      * 临时存储文件路径
      */
     tempFilePath: string;
     /**
      * 要存储的文件路径
      */
     filePath: string;
     /**
      * SaveFileSuccessCallback
      */
     success?: SaveFileSuccessCallback;
     /**
      * SaveFileFailureCallback
      */
     failure?: SaveFileFailureCallback;
     /**
      * SaveFileCompleteCallback
      */
     complete?: SaveFileCompleteCallback;
   }

   interface SaveFileSyncOptions extends BaseOptions {
     /**
      * 临时存储文件路径
      */
     tempFilePath: string;
     /**
      * 要存储的文件路径
      */
     filePath: string;
   }

   interface GetSavedFileListOptions extends BaseOptions {
     /**
      * GetSavedFileListSuccessCallback
      */
     success?: GetSavedFileListSuccessCallback;
     /**
      * GetSavedFileListFailureCallback
      */
     failure?: GetSavedFileListFailureCallback;
     /**
      * GetSavedFileListCompleteCallback
      */
     complete?: GetSavedFileListCompleteCallback;
   }

   interface RemoveSavedFileOptions extends BaseOptions {
     /**
      * 需要删除的文件路径
      */
     filePath: string;
     /**
      * RemoveSavedFileSuccessCallback
      */
     success?: RemoveSavedFileSuccessCallback;
     /**
      * RemoveSavedFileFailureCallback
      */
     failure?: RemoveSavedFileFailureCallback;
     /**
      * RemoveSavedFileCompleteCallback
      */
     complete?: RemoveSavedFileCompleteCallback;
   }

   interface CopyFileOptions extends BaseOptions {
     /**
      * 源文件路径，只可以是普通文件
      */
     srcPath: string;
     /**
      * 目标文件路径
      */
     destPath: string;
     /**
      * CopyFileSuccessCallback
      */
     success?: CopyFileSuccessCallback;
     /**
      * CopyFileFailureCallback
      */
     failure?: CopyFileFailureCallback;
     /**
      * CopyFileCompleteCallback
      */
     complete?: CopyFileCompleteCallback;
   }

   interface CopyFileSyncOptions {
     /**
      * 源文件路径，只可以是普通文件
      */
     srcPath: string;
     /**
      * 目标文件路径
      */
     destPath: string;
   }

   interface GetFileInfoOptions extends BaseOptions {
     /**
      * 要读取的文件路径
      */
     filePath: string;
     /**
      * GetFileInfoSuccessCallback
      */
     success?: GetFileInfoSuccessCallback;
     /**
      * GetFileInfoFailureCallback
      */
     failure?: GetFileInfoFailureCallback;
     /**
      * GetFileInfoCompleteCallback
      */
     complete?: GetFileInfoCompleteCallback;
   }

   interface MkdirOptions extends BaseOptions {
     /**
      * 创建的目录路径
      */
     dirPath: string;
     /**
      * 是否在递归创建该目录的上级目录后再创建该目录。如果对应的上级目录已经存在，则不创建该上级目录。如 dirPath 为 a/b/c/d 且 recursive 为 true，将创建 a 目录，再在 a 目录下创建 b 目录，以此类推直至创建 a/b/c 目录下的 d 目录。, 默认值: false
      */
     recursive?: boolean;
     /**
      * MkdirSuccessCallback
      */
     success?: MkdirSuccessCallback;
     /**
      * MkdirFailureCallback
      */
     failure?: MkdirFailureCallback;
     /**
      * MkdirCompleteCallback
      */
     complete?: MkdirCompleteCallback;
   }

   interface MkdirSyncOptions {
     /**
      * 创建的目录路径
      */
     dirPath: string;
     /**
      * 是否在递归创建该目录的上级目录后再创建该目录。如果对应的上级目录已经存在，则不创建该上级目录。如 dirPath 为 a/b/c/d 且 recursive 为 true，将创建 a 目录，再在 a 目录下创建 b 目录，以此类推直至创建 a/b/c 目录下的 d 目录。
      */
     recursive: boolean;
     /**
      * MkdirSyncSuccessCallback
      */
     success?: MkdirSyncSuccessCallback;
     /**
      * MkdirSyncFailureCallback
      */
     failure?: MkdirSyncFailureCallback;
     /**
      * MkdirSyncCompleteCallback
      */
     complete?: MkdirSyncCompleteCallback;
   }

   interface ReadFileOptions extends BaseOptions {
     /**
      * 要读取的文件的路径
      */
     filePath: string;
     /**
      * 指定读取文件的字符编码
      */
     encoding?: ReadFileEncodingType;
     /**
      * ReadFileSuccessCallback
      */
     success?: ReadFileSuccessCallback;
     /**
      * ReadFileFailureCallback
      */
     failure?: ReadFileFailureCallback;
     /**
      * ReadFileCompleteCallback
      */
     complete?: ReadFileCompleteCallback;
   }

   interface ReadFileSyncOptions {
     /**
      * 要读取的文件的路径
      */
     filePath: string;
     /**
      * 指定读取文件的字符编码
      */
     encoding?: ReadFileSyncEncodingType;
   }

   interface ReaddirOptions extends BaseOptions {
     /**
      * 要读取的目录路径
      */
     dirPath: string;
     /**
      * ReaddirFailureCallback
      */
     failure?: ReaddirFailureCallback;
     /**
      * ReaddirCompleteCallback
      */
     complete?: ReaddirCompleteCallback;
   }

   interface RenameOptions extends BaseOptions {
     /**
      * 源文件路径，可以是普通文件或目录
      */
     oldPath: string;
     /**
      * 新文件路径
      */
     newPath: string;
     /**
      * RenameFailureCallback
      */
     failure?: RenameFailureCallback;
     /**
      * RenameCompleteCallback
      */
     complete?: RenameCompleteCallback;
   }

   interface RenameSyncOptions {
     /**
      * 源文件路径，可以是普通文件或目录
      */
     oldPath: string;
     /**
      * 新文件路径
      */
     newPath: string;
   }

   interface RmdirOptions extends BaseOptions {
     /**
      * 要删除的目录路径
      */
     dirPath: string;
     /**
      * 是否递归删除目录。如果为 true，则删除该目录和该目录下的所有子目录以及文件。, 默认值: false
      */
     recursive?: boolean;
     /**
      * RmdirSuccessCallback
      */
     success?: RmdirSuccessCallback;
     /**
      * RmdirFailureCallback
      */
     failure?: RmdirFailureCallback;
     /**
      * RmdirCompleteCallback
      */
     complete?: RmdirCompleteCallback;
   }

   interface RmdirSyncOptions extends BaseOptions {
     /**
      * 要删除的目录路径
      */
     dirPath: string;
     /**
      * 是否递归删除目录。如果为 true，则删除该目录和该目录下的所有子目录以及文件。
      */
     recursive?: boolean;
   }

   interface StatOptions extends BaseOptions {
     /**
      * 文件/目录路径
      */
     path: string;
     /**
      * 是否递归获取目录下的每个文件的 Stats 信息, 默认值: false
      */
     recursive?: boolean;
     /**
      * StatSuccessCallback
      */
     success?: StatSuccessCallback;
     /**
      * StatFailureCallback
      */
     failure?: StatFailureCallback;
   }

   interface StatSyncOptions {
     /**
      * 文件/目录路径
      */
     path: string;
     /**
      * 是否递归获取目录下的每个文件的 Stats 信息
      */
     recursive?: boolean;
   }

   interface UnlinkOptions extends BaseOptions {
     /**
      * 要删除的文件路径
      */
     filePath: string;
     /**
      * UnlinkFailureCallback
      */
     failure?: UnlinkFailureCallback;
   }

   interface WriteFileOptions extends BaseOptions {
     /**
      * 要写入的文件路径
      */
     filePath: string;
     /**
      * 要写入的文本或二进制数据
      */
     data: string;
     /**
      * 指定写入文件的字符编码, 默认值: 'utf8'
      */
     encoding?: WriteFileEncodingType;
     /**
      * WriteFileFailureCallback
      */
     failure?: WriteFileFailureCallback;
   }

   interface WriteFileSyncOptions {
     /**
      * 要写入的文件路径
      */
     filePath: string;
     /**
      * 要写入的文本或二进制数据
      */
     data: string;
     /**
      * 指定写入文件的字符编码, 默认值: 'utf8'
      */
     encoding?: WriteFileSyncEncodingType;
   }

   interface GetStorageInfoOptions extends BaseOptions {
     /**
      * GetStorageInfoSuccessCallback
      */
     success?: GetStorageInfoSuccessCallback;
     /**
      * GetStorageInfoFailureCallback
      */
     failure?: GetStorageInfoFailureCallback;
   }

   interface ClearStorageOptions extends BaseOptions {
     /**
      * ClearStorageFailureCallback
      */
     failure?: ClearStorageFailureCallback;
   }

   interface RemoveStorageOptions extends BaseOptions {
     /**
      * 本地缓存中指定的 key
      */
     key: string;
     /**
      * RemoveStorageFailureCallback
      */
     failure?: RemoveStorageFailureCallback;
   }

   interface SetStorageSyncOptions {
     /**
      * 本地缓存中指定的 key
      */
     key: string;
     /**
      * 需要存储的内容。只支持原生类型、Date、及能够通过JSON.stringify序列化的对象。
      */
     data: any;
   }

   interface SetStorageOptions extends BaseOptions {
     /**
      * 本地缓存中指定的 key
      */
     key: string;
     /**
      * 需要存储的内容。只支持原生类型、Date、及能够通过JSON.stringify序列化的对象。
      */
     data: any;
     /**
      * SetStorageFailureCallback
      */
     failure?: SetStorageFailureCallback;
   }

   interface GetStorageOptions extends BaseOptions {
     /**
      * 本地缓存中指定的 key
      */
     key: string;
     /**
      * GetStorageSuccessCallback
      */
     success?: GetStorageSuccessCallback;
     /**
      * GetStorageFailureCallback
      */
     failure?: GetStorageFailureCallback;
   }

   interface GetSystemInfoOptions extends BaseOptions {
     /**
      * GetSystemInfoSuccessCallback
      */
     success?: GetSystemInfoSuccessCallback;
   }

   interface OpenSchemeUrlOptions extends BaseOptions {
     /**
      * 打开微博页面的scheme，如果是http开头的链接，默认跳浏览器，此字段需UrlEncode一遍
      */
     scheme: string;
     /**
      * 打开微博页面的scheme后的参数，使用该字段时scheme字段不能包含参数
      */
     parameter?: string;
   }

   interface OpenSchemeAndExitOptions extends BaseOptions {
     /**
      * 打开微博页面的scheme，如果是http开头的链接，默认跳浏览器，此字段需UrlEncode一遍
      */
     scheme: string;
     /**
      * 打开微博页面的scheme后的参数，使用该字段时scheme字段不能包含参数
      */
     parameter?: string;
   }

   interface WbreqeustOptions extends BaseOptions {
     /**
      * 开发者服务器接口地址
      */
     url?: WbreqeustUrlType;
     /**
      * 请求的参数
      */
     data?: string | Object;
     /**
      * 设置请求的 header，header 中不能设置 Referer。content-type 默认为 application/json
      */
     header?: Object;
     /**
      * 返回的数据格式, 默认值: 'json'
      */
     method?: WbreqeustMethodType;
     /**
      * 响应的数据类型, 默认值: 'text'
      */
     responseType?: WbreqeustResponseTypeType;
   }

   interface MapireqeustOptions extends BaseOptions {
     /**
      * 只能是 api.weibo.cn
      */
     url?: string;
     /**
      * 请求的参数
      */
     data?: string | Object;
     /**
      * 设置请求的 header，header 中不能设置 Referer。content-type 默认为 application/json
      */
     header?: Object;
     /**
      * 返回的数据格式, 默认值: 'json'
      */
     method?: MapireqeustMethodType;
     /**
      * 响应的数据类型, 默认值: 'text'
      */
     responseType?: MapireqeustResponseTypeType;
   }

   interface SendBroadCastOptions {
     /**
      * action名称
      */
     key: string;
     /**
      * 1:广播, 默认值: 1
      */
     type?: string;
     /**
      * 发送的广播时携带的数据
      */
     data?: Object;
   }

   interface PreviewImageOptions extends BaseOptions {
     /**
      * 需要预览的图片链接列表
      */
     urls: Array<string>;
     /**
      * 当前显示图片的链接
      */
     current?: string;
   }

   interface ChooseImageOptions extends BaseOptions {
     /**
      * 图片质量类型,原图：'original', 压缩图：'compressed'
      */
     sizeType: Array<string>;
     /**
      * 图片来源类型，相册传递：'album', 相机传递：'camera'
      */
     sourceType: Array<string>;
     /**
      * 数量，默认9
      */
     count?: string;
   }

   interface SaveImageToPhotosAlbumOptions extends BaseOptions {
     /**
      * 图片路径，不支持http地址
      */
     filePath: string;
   }

   interface WbLogActCodeOptions {
     /**
      * 行为码
      */
     code: string;
     /**
      * 额外参数
      */
     params?: Object;
   }

   interface GetWeiboStorageOptions extends BaseOptions {
     /**
      * 本地缓存中指定的 key
      */
     key: string;
   }

   interface SelectWeiboContactOptions extends BaseOptions {
     /**
      * SelectWeiboContactSuccessCallback
      */
     success?: SelectWeiboContactSuccessCallback;
   }

   interface ShowMultiChoiceDialogOptions extends BaseOptions {
     /**
      * 对话框标题
      */
     title: string;
     /**
      * 描述
      */
     desc?: string;
     /**
      * 描述字体颜色, 默认值: '#939393'
      */
     descColor?: string;
     /**
      * 描述是否单行显示, 默认值: true
      */
     descSingleLine?: boolean;
     /**
      * 选择项数组
      */
     itemList: Array<ShowMultiChoiceDialogItemListObject>;
     /**
      * 是否显示取消按钮, 默认值: true
      */
     showCancel?: boolean;
     /**
      * 取消按钮的文字, 默认值: '取消'
      */
     cancelText?: string;
     /**
      * 取消按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#000000'
      */
     cancelColor?: string;
     /**
      * 确认按钮的文字, 默认值: '确定'
      */
     confirmText?: string;
     /**
      * 确认按钮的文字颜色，必须是 16 进制格式的颜色字符串, 默认值: '#FF8200'
      */
     confirmColor?: string;
     /**
      * 是否禁用面板内勾选功能, 默认值: false
      */
     touchDisable?: boolean;
     /**
      * ShowMultiChoiceDialogSuccessCallback
      */
     success?: ShowMultiChoiceDialogSuccessCallback;
   }

   interface RequestPaymentOptions {
     /**
      * 签名类型
      */
     sign_type: string;
     /**
      * 签名
      */
     sign: string;
     /**
      * appkey
      */
     appkey: string;
     /**
      * 商户ID
      */
     seller_id: string;
     /**
      * 支付ID
      */
     out_pay_id: string;
     notify_url: string;
     return_url: string;
     /**
      * 标题
      */
     subject: string;
     /**
      * 说明
      */
     body: string;
     /**
      * 金额
      */
     total_amount: number;
     /**
      * 过期时间
      */
     expire: number;
     /**
      * 额外参数
      */
     extra: string;
     /**
      * RequestPaymentSuccessCallback
      */
     success?: RequestPaymentSuccessCallback;
     /**
      * RequestPaymentFailureCallback
      */
     failure?: RequestPaymentFailureCallback;
   }

   interface RequestIapPaymentOptions {
     /**
      * 取交易凭证方式的版本号，默认为1
      */
     receiptV: string;
     /**
      * 商品在itunes上的id
      */
     itunesproductid: string;
     /**
      * 商品在新浪平台的id
      */
     sinaproductid: string;
     /**
      * -
      */
     msgfrom?: string;
     /**
      * 与content成对出现，当两者不为空时，作为购买前的确认提示，如有一者为空则直接购买
      */
     title?: string;
     /**
      * 同上
      */
     content?: string;
     /**
      * 订单号
      */
     orderid: string;
     /**
      * 业务号，区分业务线用
      */
     itemid: string;
     /**
      * 支付商品的uid
      */
     payUid: string;
     /**
      * 支付商品过程中的提示字符串，默认为“正在支付，支付成功将收到微博通知”
      */
     tipLoading?: string;
     /**
      * 同WBOpenUrlSchemeExtParam
      */
     extparam?: string;
   }


   interface AccessSyncResult {
     /**
      * 失败时有错误信息
      */
     errMsg?: string;
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data?: boolean;
   }

   interface AppendFileSyncResult {
     /**
      * 失败时有错误信息
      */
     errMsg?: string;
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data?: boolean;
   }

   interface SaveFileSyncResult {
     /**
      * 失败时有错误信息
      */
     errMsg?: string;
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data?: boolean;
   }

   interface RmdirSyncResult {
     /**
      * 开发者服务器返回的数据
      */
     errMsg?: string;
   }

   interface StatSyncResult {
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 错误信息
      */
     errMsg?: string;
   }

   interface UnlinkSyncResult {
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 错误信息
      */
     errMsg?: string;
   }

   interface WriteFileSyncResult {
     /**
      * 是否成功
      */
     success?: boolean;
     /**
      * 错误信息
      */
     errMsg?: string;
   }

   interface GetStorageInfoSyncResult {
     /**
      * 当前 storage 中所有的 key
      */
     keys?: Array<String>;
     /**
      * 当前占用的空间大小, 单位 KB
      */
     currentSize?: number;
     /**
      * 限制的空间大小，单位 KB
      */
     limitSize?: number;
   }

   interface GetStorageSyncResult {
     /**
      * key对应的内容
      */
     data?: any;
   }

   interface GetSystemInfoSyncResult {
     /**
      * 设备品牌
      */
     brand?: string;
     /**
      * 设备型号
      */
     model?: string;
     /**
      * 设备像素比
      */
     pixelRatio?: number;
     /**
      * 屏幕宽度
      */
     screenWidth?: number;
     /**
      * 屏幕高度
      */
     screenHeight?: number;
     /**
      * 可使用窗口宽度
      */
     windowWidth?: number;
     /**
      * 可使用窗口高度
      */
     windowHeight?: number;
     /**
      * 状态栏的高度
      */
     statusBarHeight?: number;
     /**
      * 微博语言设置
      */
     language?: string;
     /**
      * 微博版本号
      */
     version?: string;
     /**
      * 操作系统版本
      */
     system?: string;
     /**
      * 操作系统名称
      */
     platform?: string;
     /**
      * SDK版本
      */
     SDKVersion?: string;
     /**
      * 网络状态, none/unknown/cellular/4G/3G/2G/wifi 取值之一
      */
     network?: string;
   }

   interface GetWeiboStorageSyncResult {
     /**
      * key对应的内容
      */
     data?: any;
   }


   interface BaseSuccessCallback {
     (res: BaseSuccessCallbackResult): void;
   }

   interface BaseFailureCallback {
     (res: BaseFailureCallbackResult): void;
   }

   interface BaseCompleteCallback {
     (res: BaseCompleteCallbackResult): void;
   }

   interface ShowTextDescDialogSuccessCallback {
     (res: ShowTextDescDialogSuccessCallbackResult): void;
   }

   interface ShowMultiChoiceDialogSuccessCallback {
     (res: ShowMultiChoiceDialogSuccessCallbackResult): void;
   }

   interface RequestSuccessCallback {
     (res: RequestSuccessCallbackResult): void;
   }

   interface GetLocationSuccessCallback {
     (res: GetLocationSuccessCallbackResult): void;
   }

   interface AccessSuccessCallback {
     (res: AccessSuccessCallbackResult): void;
   }

   interface AccessFailureCallback {
     (res: AccessFailureCallbackResult): void;
   }

   interface AccessCompleteCallback {
     (res: AccessCompleteCallbackResult): void;
   }

   interface AppendFileSuccessCallback {
     (res: AppendFileSuccessCallbackResult): void;
   }

   interface AppendFileFailureCallback {
     (res: AppendFileFailureCallbackResult): void;
   }

   interface AppendFileCompleteCallback {
     (res: AppendFileCompleteCallbackResult): void;
   }

   interface SaveFileSuccessCallback {
     (res: SaveFileSuccessCallbackResult): void;
   }

   interface SaveFileFailureCallback {
     (res: SaveFileFailureCallbackResult): void;
   }

   interface SaveFileCompleteCallback {
     (res: SaveFileCompleteCallbackResult): void;
   }

   interface GetSavedFileListSuccessCallback {
     (res: GetSavedFileListSuccessCallbackResult): void;
   }

   interface GetSavedFileListFailureCallback {
     (res: GetSavedFileListFailureCallbackResult): void;
   }

   interface GetSavedFileListCompleteCallback {
     (res: GetSavedFileListCompleteCallbackResult): void;
   }

   interface RemoveSavedFileSuccessCallback {
     (res: RemoveSavedFileSuccessCallbackResult): void;
   }

   interface RemoveSavedFileFailureCallback {
     (res: RemoveSavedFileFailureCallbackResult): void;
   }

   interface RemoveSavedFileCompleteCallback {
     (res: RemoveSavedFileCompleteCallbackResult): void;
   }

   interface CopyFileSuccessCallback {
     (res: CopyFileSuccessCallbackResult): void;
   }

   interface CopyFileFailureCallback {
     (res: CopyFileFailureCallbackResult): void;
   }

   interface CopyFileCompleteCallback {
     (res: CopyFileCompleteCallbackResult): void;
   }

   interface GetFileInfoSuccessCallback {
     (res: GetFileInfoSuccessCallbackResult): void;
   }

   interface GetFileInfoFailureCallback {
     (res: GetFileInfoFailureCallbackResult): void;
   }

   interface GetFileInfoCompleteCallback {
     (res: GetFileInfoCompleteCallbackResult): void;
   }

   interface MkdirSuccessCallback {
     (res: MkdirSuccessCallbackResult): void;
   }

   interface MkdirFailureCallback {
     (res: MkdirFailureCallbackResult): void;
   }

   interface MkdirCompleteCallback {
     (res: MkdirCompleteCallbackResult): void;
   }

   interface MkdirSyncSuccessCallback {
     (res: MkdirSyncSuccessCallbackResult): void;
   }

   interface MkdirSyncFailureCallback {
     (res: MkdirSyncFailureCallbackResult): void;
   }

   interface MkdirSyncCompleteCallback {
     (res: MkdirSyncCompleteCallbackResult): void;
   }

   interface ReadFileSuccessCallback {
     (res: ReadFileSuccessCallbackResult): void;
   }

   interface ReadFileFailureCallback {
     (res: ReadFileFailureCallbackResult): void;
   }

   interface ReadFileCompleteCallback {
     (res: ReadFileCompleteCallbackResult): void;
   }

   interface ReaddirFailureCallback {
     (res: ReaddirFailureCallbackResult): void;
   }

   interface ReaddirCompleteCallback {
     (res: ReaddirCompleteCallbackResult): void;
   }

   interface RenameFailureCallback {
     (res: RenameFailureCallbackResult): void;
   }

   interface RenameCompleteCallback {
     (res: RenameCompleteCallbackResult): void;
   }

   interface RmdirSuccessCallback {
     (res: RmdirSuccessCallbackResult): void;
   }

   interface RmdirFailureCallback {
     (res: RmdirFailureCallbackResult): void;
   }

   interface RmdirCompleteCallback {
     (res: RmdirCompleteCallbackResult): void;
   }

   interface StatSuccessCallback {
     (res: StatSuccessCallbackResult): void;
   }

   interface StatFailureCallback {
     (res: StatFailureCallbackResult): void;
   }

   interface UnlinkFailureCallback {
     (res: UnlinkFailureCallbackResult): void;
   }

   interface WriteFileFailureCallback {
     (res: WriteFileFailureCallbackResult): void;
   }

   interface GetStorageInfoSuccessCallback {
     (res: GetStorageInfoSuccessCallbackResult): void;
   }

   interface GetStorageInfoFailureCallback {
     (res: GetStorageInfoFailureCallbackResult): void;
   }

   interface ClearStorageFailureCallback {
     (res: ClearStorageFailureCallbackResult): void;
   }

   interface RemoveStorageFailureCallback {
     (res: RemoveStorageFailureCallbackResult): void;
   }

   interface SetStorageFailureCallback {
     (res: SetStorageFailureCallbackResult): void;
   }

   interface GetStorageSuccessCallback {
     (res: GetStorageSuccessCallbackResult): void;
   }

   interface GetStorageFailureCallback {
     (res: GetStorageFailureCallbackResult): void;
   }

   interface GetSystemInfoSuccessCallback {
     (res: GetSystemInfoSuccessCallbackResult): void;
   }

   interface SelectWeiboContactSuccessCallback {
     (res: SelectWeiboContactSuccessCallbackResult): void;
   }

   interface ShowMultiChoiceDialogSuccessCallback {
     (res: ShowMultiChoiceDialogSuccessCallbackResult): void;
   }

   interface RequestPaymentSuccessCallback {
     (res: RequestPaymentSuccessCallbackResult): void;
   }

   interface RequestPaymentFailureCallback {
     (res: RequestPaymentFailureCallbackResult): void;
   }


   interface BaseSuccessCallbackResult {

   }

   interface BaseFailureCallbackResult {

   }

   interface BaseCompleteCallbackResult {

   }

   interface ShowTextDescDialogSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 为 true 时，表示用户点击了确定按钮
      */
     confirm: boolean;
     /**
      * 为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）
      */
     cancel: boolean;
   }

   interface ShowMultiChoiceDialogSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 为 true 时，表示用户点击了确定按钮
      */
     confirm: boolean;
     /**
      * 为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）
      */
     cancel: boolean;
     /**
      * item的选中状态
      */
     stateList: Array<ShowMultiChoiceDialogSuccessStateListObject>;
   }

   interface RequestSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 开发者服务器返回的数据
      */
     data: string | Object;
     /**
      * 开发者服务器返回的 HTTP 状态码
      */
     statusCode: number;
     /**
      * 开发者服务器返回的 HTTP Response Header
      */
     header: Object;
   }

   interface GetLocationSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 纬度，范围为 -90~90，负数表示南纬
      */
     latitude: number;
     /**
      * 经度，范围为 -180~180，负数表示西经
      */
     longitude: number;
     /**
      * 速度，单位 m/s
      */
     speed: number;
     /**
      * 位置的精确度
      */
     accuracy: number;
     /**
      * 高度，单位 m
      */
     altitude: number;
     /**
      * 垂直精度，单位 m（Android 无法获取，返回 0）
      */
     verticalAccuracy: number;
     /**
      * 水平精度，单位 m
      */
     horizontalAccuracy: number;
   }

   interface AccessSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * data为true
      */
     data: boolean;
     /**
      * 成功回调success为true
      */
     success: boolean;
   }

   interface AccessFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
     /**
      * 失败回调success为false
      */
     success: boolean;
   }

   interface AccessCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 失败时有错误信息
      */
     errMsg: string;
     /**
      * 是否成功
      */
     success: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data: boolean;
   }

   interface AppendFileSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * data为true
      */
     data: boolean;
     /**
      * 成功回调success为true
      */
     success: boolean;
   }

   interface AppendFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
     /**
      * 失败回调success为false
      */
     success: boolean;
   }

   interface AppendFileCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 失败时有错误信息
      */
     errMsg: string;
     /**
      * 是否成功
      */
     success: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data: boolean;
   }

   interface SaveFileSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * data为true
      */
     data: boolean;
     /**
      * 成功回调success为true
      */
     success: boolean;
   }

   interface SaveFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
     /**
      * 失败回调success为false
      */
     success: boolean;
   }

   interface SaveFileCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 失败时有错误信息
      */
     errMsg: string;
     /**
      * 是否成功
      */
     success: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data: boolean;
   }

   interface GetSavedFileListSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 文件数组
      */
     fileList: Array<GetSavedFileListSuccessFileListObject>;
   }

   interface GetSavedFileListFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface GetSavedFileListCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface RemoveSavedFileSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * data为true
      */
     data: boolean;
     /**
      * 成功回调success为true
      */
     success: boolean;
   }

   interface RemoveSavedFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
     /**
      * 失败回调success为false
      */
     success: boolean;
   }

   interface RemoveSavedFileCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 失败时有错误信息
      */
     errMsg: string;
     /**
      * 是否成功
      */
     success: boolean;
     /**
      * 成功时有此key，且值为true
      */
     data: boolean;
   }

   interface CopyFileSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 成功值为true
      */
     data: boolean;
   }

   interface CopyFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface CopyFileCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface GetFileInfoSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 文件大小，以字节为单位
      */
     size: number;
   }

   interface GetFileInfoFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface GetFileInfoCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface MkdirSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 文件数组
      */
     fileList: Array<Object>;
   }

   interface MkdirFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface MkdirCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface MkdirSyncSuccessCallbackResult extends BaseSuccessCallbackResult {

   }

   interface MkdirSyncFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface MkdirSyncCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface ReadFileSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 文件内容
      */
     data: string;
   }

   interface ReadFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface ReadFileCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface ReaddirFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface ReaddirCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface RenameFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface RenameCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface RmdirSuccessCallbackResult extends BaseSuccessCallbackResult {

   }

   interface RmdirFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface RmdirCompleteCallbackResult extends BaseCompleteCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface StatSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 当 recursive 为 false 时，res.stats 是一个 Stats 对象。当 recursive 为 true 且 path 是一个目录的路径时，res.stats 是一个 Object，key 以 path 为根路径的相对路径，value 是该路径对应的 Stats 对象。
      */
     stats: Stats | Object;
   }

   interface StatFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface UnlinkFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface WriteFileFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 错误信息
      */
     errMsg: string;
   }

   interface GetStorageInfoSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 当前 storage 中所有的 key
      */
     keys: Array<String>;
     /**
      * 当前占用的空间大小, 单位 KB
      */
     currentSize: number;
     /**
      * 限制的空间大小，单位 KB
      */
     limitSize: number;
   }

   interface GetStorageInfoFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 失败的原因
      */
     errMsg: string;
   }

   interface ClearStorageFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 失败的原因
      */
     errMsg: string;
   }

   interface RemoveStorageFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 失败的原因
      */
     errMsg: string;
   }

   interface SetStorageFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 失败的原因
      */
     errMsg: string;
   }

   interface GetStorageSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * key对应的内容
      */
     data: any;
   }

   interface GetStorageFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 失败的原因
      */
     errMsg: string;
   }

   interface GetSystemInfoSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 设备品牌
      */
     brand: string;
     /**
      * 设备型号
      */
     model: string;
     /**
      * 设备像素比
      */
     pixelRatio: number;
     /**
      * 屏幕宽度
      */
     screenWidth: number;
     /**
      * 屏幕高度
      */
     screenHeight: number;
     /**
      * 可使用窗口宽度
      */
     windowWidth: number;
     /**
      * 可使用窗口高度
      */
     windowHeight: number;
     /**
      * 状态栏的高度
      */
     statusBarHeight: number;
     /**
      * 微博语言设置
      */
     language: string;
     /**
      * 微博版本号
      */
     version: string;
     /**
      * 操作系统版本
      */
     system: string;
     /**
      * 操作系统名称
      */
     platform: string;
     /**
      * SDK版本
      */
     SDKVersion: string;
     /**
      * 网络状态, none/unknown/cellular/4G/3G/2G/wifi 取值之一
      */
     network: string;
   }

   interface SelectWeiboContactSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 用户信息
      */
     userinfo: SelectWeiboContactSuccessUserinfoObject;
   }

   interface ShowMultiChoiceDialogSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 为 true 时，表示用户点击了确定按钮
      */
     confirm: boolean;
     /**
      * 为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）
      */
     cancel: boolean;
     /**
      * item的选中状态
      */
     stateList: Array<ShowMultiChoiceDialogSuccessStateListObject>;
   }

   interface RequestPaymentSuccessCallbackResult extends BaseSuccessCallbackResult {
     /**
      * 返回码
      */
     statusCode: number;
     /**
      * 返回描述，由宿主程序定义
      */
     des: Object;
   }

   interface RequestPaymentFailureCallbackResult extends BaseFailureCallbackResult {
     /**
      * 返回码
      */
     statusCode: number;
   }

  /**
   * Native端的环境信息，可以直接取值，可用于获取手机系统、app版本、屏幕分辨率等信息。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-environment
   */
declare interface WBXEnvironment {
     /**
      * 手机系统，目前只有"android"和"iOS"
      */
     platform?: string;
     /**
      * 微博版本
      */
     appVersion?: string;
     /**
      * App缓存路径
      */
     cacheDir?: string;
     /**
      * 手机系统版本
      */
     osVersion?: string;
     /**
      * 手机型号
      */
     deviceModel?: string;
     /**
      * App名称
      */
     appName?: string;
     /**
      * 屏幕密度
      */
     scale?: string;
     /**
      * 小程序SDK版本
      */
     sdkVersion?: string;
     /**
      * 屏幕宽度
      */
     deviceWidth?: string;
     /**
      * 屏幕高度
      */
     deviceHeight?: string;
     /**
      * 手机系统语言
      */
     lan?: string;


}
  /**
   * 文件管理器
   * 详见: http://wbox.client.weibo.cn/docs/file
   */
declare interface FileSystemManager {


  /**
   * 判断文件/目录是否存在。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-access
   */
   access(object: AccessOptions): void;
  /**
   * FileSystemManager.access的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-accessSync
   */
   accessSync(object: AccessSyncOptions): AccessSyncResult;
  /**
   * 在文件结尾追加内容。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-appendFile
   */
   appendFile(object: AppendFileOptions): void;
  /**
   * FileSystemManager.appendFile的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-appendFileSync
   */
   appendFileSync(object: AppendFileSyncOptions): AppendFileSyncResult;
  /**
   * 保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-saveFile
   */
   saveFile(object: SaveFileOptions): void;
  /**
   * FileSystemManager.saveFile的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-saveFileSync
   */
   saveFileSync(object: SaveFileSyncOptions , undefined: errMsg说明): SaveFileSyncResult;
  /**
   * 获取该小程序下已保存的本地缓存文件列表。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-getSavedFileList
   */
   getSavedFileList(object: GetSavedFileListOptions): void;
  /**
   * 删除该小程序下已保存的本地缓存文件
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-removeSavedFile
   */
   removeSavedFile(object: RemoveSavedFileOptions): void;
  /**
   * 复制文件。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-copyFile
   */
   copyFile(object: CopyFileOptions): void;
  /**
   * FileSystemManager.copyFile的同步版本。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-copyFileSync
   */
   copyFileSync(object: CopyFileSyncOptions): void;
  /**
   * 获取该小程序下的 本地临时文件 或 本地缓存文件 信息。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-getFileInfo
   */
   getFileInfo(object: GetFileInfoOptions): void;
  /**
   * 创建目录。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-mkdir
   */
   mkdir(object: MkdirOptions): void;
  /**
   * [object Object], 的同步版本。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-mkdirSync
   */
   mkdirSync(object: MkdirSyncOptions): void;
  /**
   * 读取本地文件内容。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-readFile
   */
   readFile(object: ReadFileOptions): void;
  /**
   * [object Object], 的同步版本。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-readFileSync
   */
   readFileSync(object: ReadFileSyncOptions): string;
  /**
   * 读取目录内文件列表。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-readdir
   */
   readdir(object: ReaddirOptions): void;
  /**
   * 重命名文件。可以把文件从 oldPath 移动到 newPath。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-rename
   */
   rename(object: RenameOptions): void;
  /**
   * [object Object], 的同步版本。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-renameSync
   */
   renameSync(object: RenameSyncOptions): void;
  /**
   * 删除目录。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-rmdir
   */
   rmdir(object: RmdirOptions): void;
  /**
   * [object Object], 的同步版本
文件系统操作，同步删除文件目录
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-rmdirSync
   */
   rmdirSync(object: RmdirSyncOptions): RmdirSyncResult;
  /**
   * 获取文件 Stats 对象
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-stat
   */
   stat(object: StatOptions): void;
  /**
   * 删除文件
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-unlink
   */
   unlink(object: UnlinkOptions): void;
  /**
   * [object Object], 的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-unlinkSync
   */
   unlinkSync(filePath: string): UnlinkSyncResult;
  /**
   * 写文件
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-writeFile
   */
   writeFile(object: WriteFileOptions): void;
  /**
   * [object Object], 的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager-writeFileSync
   */
   writeFileSync(object: WriteFileSyncOptions): WriteFileSyncResult;

}
  /**
   * 描述文件状态的对象
   * 详见: http://wbox.client.weibo.cn/docs/wbx-stat
   */
declare interface Stats {
     /**
      * 文件的类型和存取的权限，对应 POSIX stat.st_mode
      */
     mode?: string;
     /**
      * 文件大小，单位：B，对应 POSIX stat.st_size
      */
     size?: number;
     /**
      * 文件最近一次被存取或被执行的时间，UNIX 时间戳，对应 POSIX stat.st_atime
      */
     lastAccessedTime?: number;
     /**
      * 文件最后一次被修改的时间，UNIX 时间戳，对应 POSIX stat.st_mtime
      */
     lastModifiedTime?: number;

  /**
   * 判断当前文件是否一个目录
   * 详见: http://wbox.client.weibo.cn/docs/wbx-stat-isDirectory
   */
   isDirectory(): boolean;
  /**
   * 判断当前文件是否一个普通文件
   * 详见: http://wbox.client.weibo.cn/docs/wbx-stat-isFile
   */
   isFile(): boolean;

}
  /**
   * undefined
   * 详见: http://wbox.client.weibo.cn/docs/singlepage
   */
declare interface page/view接入 {



}

 declare interface WBoxInterface { 
  /**
   * 判断某个api是否可用
   * 详见: http://wbox.client.weibo.cn/docs/caniuse
   */
   caniuse(schema: string): boolean;
  /**
   * 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wbx.navigateBack 可以返回到原页面。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-navigator
   */
   navigateTo(object: NavigateToOptions): void;
  /**
   * 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-navigator
   */
   redirectTo(): void;
  /**
   * 关闭所有页面，打开到应用内的某个页面。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-navigator
   */
   reLaunch(): void;
  /**
   * 关闭当前页面，返回上一页面或多级页面。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-navigator
   */
   navigateBack(object: NavigateBackOptions): void;
  /**
   * 设置导航栏颜色
   * 详见: http://wbox.client.weibo.cn/docs/navigator
   */
   setNavigationBarColor(color: string): void;
  /**
   * 设置导航栏标题
   * 详见: http://wbox.client.weibo.cn/docs/navigator
   */
   setNavigationBarTitle(title: string): void;
  /**
   * 设置导航栏标题颜色
   * 详见: http://wbox.client.weibo.cn/docs/navigator
   */
   setNavigationBarTitleColor(color: string): void;
  /**
   * 显示消息提示框
   * 详见: http://wbox.client.weibo.cn/docs/toast
   */
   showToast(object: ShowToastOptions): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/toast
   */
   hideToast(): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/toast
   */
   showLoading(object: ShowLoadingOptions): void;
  /**
   * 隐藏加载框
   * 详见: http://wbox.client.weibo.cn/docs/toast
   */
   hideLoading(object: HideLoadingOptions): void;
  /**
   * 显示操作菜单
   * 详见: http://wbox.client.weibo.cn/docs/actionSheet
   */
   showActionSheet(object: ShowActionSheetOptions): void;
  /**
   * 动态设置窗口的背景色
   * 详见: http://wbox.client.weibo.cn/docs/background
   */
   setBackgroundColor(object: SetBackgroundColorOptions): void;
  /**
   * 动态设置下拉背景字体、loading 图的样式
   * 详见: http://wbox.client.weibo.cn/docs/background
   */
   setBackgroundTextStyle(object: SetBackgroundTextStyleOptions): void;
  /**
   * 设置导航栏颜色
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   setTabBarBadge(object: SetTabBarBadgeOptions): void;
  /**
   * Object object
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   removeTabBarBadge(object: RemoveTabBarBadgeOptions): void;
  /**
   * Object object
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   setTabBar(object: SetTabBarOptions): void;
  /**
   * 设置导航栏标题
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   showTabBarRedDot(object: ShowTabBarRedDotOptions): void;
  /**
   * 设置导航栏标题
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   hideTabBarRedDot(object: HideTabBarRedDotOptions): void;
  /**
   * 设置导航栏标题
   * 详见: http://wbox.client.weibo.cn/docs/tabbar
   */
   setTabBarStyle(object: SetTabBarStyleOptions): void;
  /**
   * Object object 继承于,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/dialog
   */
   showTextDescDialog(object: ShowTextDescDialogOptions): void;
  /**
   * Object object 继承于,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/dialog
   */
   showMultiChoiceDialog(object: ShowMultiChoiceDialogOptions): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/dialog
   */
   showInputDialog(object: ShowInputDialogOptions): void;
  /**
   * 发起 HTTPS 网络请求。
   * 详见: http://wbox.client.weibo.cn/docs/stream
   */
   request(object: RequestOptions): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/locatoin
   */
   getLocation(object: GetLocationOptions): void;
  /**
   * 获取全局唯一的文件管理器
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getFileSystemManager
   */
   getFileSystemManager(): FileSystemManager;
  /**
   *  同步获取当前storage的相关信息
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getStorageInfoSync
   */
   getStorageInfoSync(): GetStorageInfoSyncResult;
  /**
   * 异步获取当前storage的相关信息
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getStorageInfo
   */
   getStorageInfo(object: GetStorageInfoOptions): void;
  /**
   * 同步清理本地数据缓存
   * 详见: http://wbox.client.weibo.cn/docs/wbx-clearStorageSync
   */
   clearStorageSync(): boolean;
  /**
   * 异步清理本地数据缓存
   * 详见: http://wbox.client.weibo.cn/docs/wbx-clearStorage
   */
   clearStorage(object: ClearStorageOptions): void;
  /**
   * 同步从本地缓存中移除指定key及对应内容
   * 详见: http://wbox.client.weibo.cn/docs/wbx-removeStorageSync
   */
   removeStorageSync(key: string): boolean;
  /**
   * 异步从本地缓存中移除指定key及对应内容
   * 详见: http://wbox.client.weibo.cn/docs/wbx-removeStorage
   */
   removeStorage(object: RemoveStorageOptions): void;
  /**
   * 同步将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-setStorageSync
   */
   setStorageSync(object: SetStorageSyncOptions): boolean;
  /**
   * 异步将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。
   * 详见: http://wbox.client.weibo.cn/docs/wbx-setStorage
   */
   setStorage(object: SetStorageOptions): void;
  /**
   * 同步步从本地缓存中获取指定key的内容
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getStorageSync
   */
   getStorageSync(key: string): GetStorageSyncResult;
  /**
   * 异步从本地缓存中获取指定key的内容
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getStorage
   */
   getStorage(object: GetStorageOptions): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getSystemInfo
   */
   getSystemInfo(object: GetSystemInfoOptions): void;
  /**
   * 返回值 Object
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getSystemInfo
   */
   getSystemInfoSync(): GetSystemInfoSyncResult;
  /**
   * 通过scheme打开微博页面。 
   * 详见: http://wbox.client.weibo.cn/docs/openurl
   */
   openSchemeUrl(object: OpenSchemeUrlOptions): void;
  /**
   * Object object 继承,[object Object]
   * 详见: http://wbox.client.weibo.cn/docs/openurl
   */
   openSchemeAndExit(object: OpenSchemeAndExitOptions): void;
  /**
   * 请求微博内部的服务器上的一个网络接口
   * 详见: http://wbox.client.weibo.cn/docs/wbrequest
   */
   wbreqeust(object: WbreqeustOptions): void;
  /**
   * 请求微博mapi的一个接口
   * 详见: http://wbox.client.weibo.cn/docs/mapirequest
   */
   mapireqeust(object: MapireqeustOptions): void;
  /**
   * sdk只负责把数据透传给宿主应用宿主应用在初始化时通过配置IWBXBroadCastModuleAdapter，来处理透传的数据。
接下来的参数只是建议的格式，也可自定义。
   * 详见: http://wbox.client.weibo.cn/docs/broadcast
   */
   sendBroadCast(object: SendBroadCastOptions): void;
  /**
   * 主动关闭当前小程序，和点击右上角关闭按钮的逻辑一致
   * 详见: http://wbox.client.weibo.cn/docs/wbx-wbTerminateApp
   */
   wbTerminateApp(): void;
  /**
   * 预览图片
   * 详见: http://wbox.client.weibo.cn/docs/previewimage
   */
   previewImage(object: PreviewImageOptions): void;
  /**
   * 选择图片
   * 详见: http://wbox.client.weibo.cn/docs/imageM
   */
   chooseImage(object: ChooseImageOptions): void;
  /**
   * 保存图片到相册
   * 详见: http://wbox.client.weibo.cn/docs/imageM
   */
   saveImageToPhotosAlbum(object: SaveImageToPhotosAlbumOptions): void;
  /**
   * 调用微博日志系统记录行为码日志
   * 详见: http://wbox.client.weibo.cn/docs/wbanalysis
   */
   wbLogActCode(object: WbLogActCodeOptions): void;
  /**
   * wbx.getWeiboStorage 的同步版本
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getWeiboStorageSync
   */
   getWeiboStorageSync(key: string): GetWeiboStorageSyncResult;
  /**
   * 从本地缓存中异步获取指定 key 的内容
   * 详见: http://wbox.client.weibo.cn/docs/wbx-getWeiboStorage
   */
   getWeiboStorage(object: GetWeiboStorageOptions): void;
  /**
   * 选择微博联系人
   * 详见: http://wbox.client.weibo.cn/docs/contact-selectWeiboContact
   */
   selectWeiboContact(object: SelectWeiboContactOptions): void;
  /**
   * 显示多选对话框
   * 详见: http://wbox.client.weibo.cn/docs/dialog-showMultiChoiceDialog
   */
   showMultiChoiceDialog(object: ShowMultiChoiceDialogOptions): void;
  /**
   * Object object
   * 详见: http://wbox.client.weibo.cn/docs/payment
   */
   requestPayment(object: RequestPaymentOptions): void;
  /**
   * Object object
   * 详见: http://wbox.client.weibo.cn/docs/iap
   */
   requestIapPayment(object: RequestIapPaymentOptions): void;
 } 
 declare const wbx: WBoxInterface; 

 declare const WBXEnvironment: WBXEnvironment; 

